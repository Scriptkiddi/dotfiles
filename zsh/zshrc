#
# Executes commands at the start of an interactive session.
#

###############
## Prepare stuff
###############
# Restore PATH
if [ ! -z "$PATHBACKUP" ]; then
	PATH="$PATHBACKUP"
	export PATH
fi
# This will be needed later
zshconf="$HOME/.dotfiles/zsh"
zshincl="$zshconf/include"
# autoad stuff as early as possible
source "$zshincl/autoload.zsh"
# Source antigen
source "$zshincl/antigen.zsh"

###############
## Settings
###############
# Nicer ls colors
export LS_COLORS="di=36;40:ln=35;40:so=32;40:pi=34;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:"
# Set systemd's editor
export SYSTEMD_EDITOR=$EDITOR
# Default settings for minicom
export MINICOM='-D /dev/ttyUSB0 -b 115200 -c on -t linux'
# More restrictive umask
umask 027
# Aliases
source "$zshincl/aliases.zsh"
# SSH agent
source "$zshincl/ssh-agent.zsh"

###############
## zsh options
###############
# setopts
source "$zshincl/setopt.zsh"
# Set terminal title
source "$zshincl/title.zsh"
# Configure keys
source "$zshincl/keys.zsh"
# Configure completion
source "$zshincl/completion.zsh"
# Highlighters
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
# History file
HISTFILE=~/.zsh_history
# Size of history
HISTSIZE=1000
SAVEHIST="$HISTSIZE"
# Report time after 3 secs of command run time TODO Why is this not working anymore
REPORTTIME=3

###############
## Functions
################
source "$zshincl/extract.zsh"

mkcd() {
	[[ $1 ]] || return 0
	[[ -d $1 ]] || mkdir -vp "$1"
	[[ -d $1 ]] && builtin cd "$1"
}

kopt() {
	[[ $1 ]] || return 1
	zgrep -i "${1}" /proc/config.gz
}

deps() {
	local bin dir
	if [[ -f "$1" ]]; then
		bin=$1
	elif bin=$(type -P "$1"); then
		:
	else
		# maybe its a lib?
		[[ -f /usr/lib/$1 ]] && bin=/usr/lib/$1
	fi
	if [[ $bin && $1 != "$bin" ]]; then
		printf '%s => %s\n\n' "$1" "$bin"
	fi
	if [[ -z $bin ]]; then
		echo "error: binary not found: $1"
		return 1
	fi
	objdump -p "$bin" | awk '/NEEDED/ { print $2 }'
}

###############
## Try to launch tmux
################
# TODO Move this to an own file
if hash tmux 2>/dev/null; then
	alias tmux='tmux -2' # Color support
	export TERM='screen-256color'
	# Works because shell automatically trims
	trim() { return $1; }
	# Outer tmux for mango
	if [ "`hostname`" = "mango" ] && [[ -z "$TMUX" ]]; then
		tmux start-server
		session_id="outer-`date +%Y%m%d%H%M%S`"
		tmux new-session -d -s "$session_id" "journalctl -f"
		tmux set-option -t "$session_id" status off
		tmux split-window -t "$session_id" -v -p 90 "`getent passwd $USER | cut -d: -f7`; tmux kill-session -t $session_id"
		tmux set-option -t "$session_id" -s prefix M-y
		tmux set-option -t "$session_id" -s mouse off
		tmux set-option -t "$session_id" -s pane-border-fg colour235
		tmux set-option -t "$session_id" -s pane-active-border-fg colour235
		#tmux unbind -t "$session_id" C-a
		exec tmux attach-session -t "$session_id"
		#tmux kill-session -t "$session_id" 2>/dev/null
		exit
	fi
	# Unset TMUX if we just spawned the outer session and want to spawn the inner session
	session="`tmux display-message -p '#S'`"
	if [ "`hostname`" = "mango" ] && [ "${session:0:5}" = "outer" ]; then
		unset TMUX
	fi
	# TODO Kill old sessions
	# Create new base session
	if [[ `tmux ls | grep "^base" | wc -l` == 0 ]]; then
		tmux new-session -s base
		exit
	else
		# Base session exists, attach to it
		# Don't spawn tmux inside the inner session
		if [[ -z "$TMUX" ]]; then
			session_id=`date +%Y%m%d%H%M%S`
			tmux new-session -d -t base -s $session_id
			exec tmux attach-session -t $session_id
			#tmux kill-session -t $session_id
			exit
		fi
	fi
fi

